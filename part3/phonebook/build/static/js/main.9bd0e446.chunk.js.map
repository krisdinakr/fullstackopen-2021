{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Button.js","components/Persons.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","filter","setFilter","value","onChange","e","target","PersonForm","newName","setNewName","newNumber","setNewNumber","addContact","type","onClick","Button","handler","Persons","result","deleteContact","map","person","name","number","id","baseUrl","axios","get","then","response","data","newContactObj","post","delete","put","Notification","notification","className","App","useState","persons","setPersons","setNotification","useEffect","personsService","toLowerCase","includes","event","preventDefault","checkDuplicate","find","window","confirm","setTimeout","catch","err","concat","console","log","error","contact","i","newPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9bd0e446.chunk.js","sourcesContent":["import React from 'react';\n\nconst Filter = ({ filter, setFilter }) => (\n  <div>\n    filter shown with <input value={filter} onChange={(e) => setFilter(e.target.value)} />\n  </div>\n);\n\nexport default Filter;","import React from 'react';\n\nconst PersonForm = ({ newName, setNewName, newNumber, setNewNumber, addContact }) => (\n  <form>\n    <div>\n      name: <input value={newName} onChange={(e) => setNewName(e.target.value)} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={(e) => setNewNumber(e.target.value)} />\n    </div>\n    <div>\n      <button type=\"submit\" onClick={addContact}>add</button>\n    </div>\n  </form>\n)\n\nexport default PersonForm;","import React from 'react';\n\nconst Button = ({ handler }) => (\n  <button onClick={handler}>delete</button>\n)\n\nexport default Button;\n","import React from 'react';\nimport Button from './Button';\n\nconst Persons = ({ result, deleteContact }) => (\n  <div>\n    {result.map(person => (\n      <p key={person.name}>\n        {person.name} {person.number}\n        <span><Button handler={() => deleteContact(person.id)} /></span>\n      </p>\n    ))}\n  </div>\n);\n\nexport default Persons;","/* eslint-disable import/no-anonymous-default-export */\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst create = (newContactObj) => {\r\n  const request = axios.post(baseUrl, newContactObj);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst remove = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nconst update = (id, newContactObj) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newContactObj);\r\n  return request.then(response => response.data);\r\n}\r\n\r\nexport default { getAll, create, remove, update }","const Notification = ({ notification }) => {\n  \n  if (!notification) return null;\n\n  return (\n    <div className={`notification notification--${notification[0]}`}>\n      <span>{notification[1]}</span>\n    </div>\n  )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personsService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [notification, setNotification] = useState(null);\n\n  useEffect(() => {\n    personsService.getAll()\n      .then(data => setPersons(data));\n  }, [])\n\n  const addContact = (event) => {\n    event.preventDefault();\n\n    const newContactObj = {\n      name: newName,\n      number: newNumber\n    };\n\n    const checkDuplicate = persons.find(person => person.name.toLowerCase().includes(newName.toLowerCase()));\n\n    if (checkDuplicate) {\n      const confirm = window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)\n      if (confirm) {\n        personsService.update(checkDuplicate.id, newContactObj)\n          .then(newContactObj => {\n            setPersons(persons.map(person => person.id !== checkDuplicate.id ? person : newContactObj));\n            setNotification(['success', `${newName}'s Number Updated`])\n            setTimeout(() => {\n              setNotification(null);\n            }, 5000);\n          })\n          .catch(err => {\n            setNotification(['error', `Information of ${newName} has already been removed from server`]);\n            setTimeout(() => {\n              setNotification(null);\n            }, 5000);\n          })\n      }\n    } else {\n      personsService.create(newContactObj)\n        .then(newContactObj => {\n          setPersons(persons.concat(newContactObj));\n          setNotification(['success', `Added ${newName}`]);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n        })\n        .catch(err => {\n          console.log(err.response.data)\n          setNotification(['error', err.response.data.error]);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n        })\n    }\n\n    setNewName('');\n    setNewNumber('');\n  }\n\n  const deleteContact = (id) => {\n    const contact = persons.find(i => i.id === id);\n    const confirm = window.confirm(`Delete ${contact.name}?`);\n    if (confirm) {\n      personsService.remove(id)\n        .then(() => {\n          const newPersons = persons.filter(i => i !== contact);\n          setPersons(newPersons);\n          setNotification(['success', `${contact.name} deleted from contact`]);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000);\n        })\n        .catch(err => {\n          setNotification(['error', `Information of ${contact.name} has already been removed from server`]);\n          setTimeout(() => {\n            setNotification(null);\n          }, 5000)\n        })\n    } \n  }\n\n  const result = persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification notification={notification} />\n      <Filter filter={filter} setFilter={setFilter} />\n      <h2>add a new</h2>\n      <PersonForm newName={newName} setNewName={setNewName} newNumber={newNumber} setNewNumber={setNewNumber} addContact={addContact} />\n      <h2>Numbers</h2>\n      <Persons result={result} deleteContact={deleteContact} />\n    </div>\n  )\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}